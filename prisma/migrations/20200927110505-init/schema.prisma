// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url = "***"
}

generator client {
  provider = "prisma-client-js"
}

enum Gender {
  male
  female
  other
}

enum FileType {
  image
  video
}

enum SocialProviderType {
  email
  facebook
  google
  instagram
}

enum OnlineStatus {
  online
  away
  offline
}

enum PrivateField {
  birthday
  introduction
  gender
  hobbies
  phoneNumber
  job
  height
}

enum MustHaveField {
  age
  height
  distance
  gender
}

model User {
  id              String           @default(uuid()) @id
  password        String?
  nickName        String
  introduction    String?
  birthday        DateTime?
  gender          Gender?
  hobbies         String[]
  phoneNumber     String?
  job             String?
  height          Int?
  privateFields   PrivateField[]
  minAgePrefer    Int?
  maxAgePrefer    Int?
  minHeightPrefer Int?
  maxHeightPrefer Int?
  genderPrefer    Gender[]
  distancePrefer  Int?
  mustHaveFields  MustHaveField[]
  allowMatching   Boolean          @default(true)
  isPrivate       Boolean          @default(false)
  showActive      Boolean          @default(true)
  updatedAt       DateTime         @updatedAt
  createdAt       DateTime         @default(now())
  deletedAt       DateTime?
  avatar          File?            @relation("avatar", fields: [avatarId], references: [id])
  avatarId        String?
  role            Role             @relation(fields: [roleId], references: [id])
  roleId          String
  userImage       UserImage[]
  senderMessage   Message[]        @relation("senderMessage")
  receiverMessage Message[]        @relation("receiverMessage")
  socialProvider  SocialProvider[]
  senderFriend    Friend[]         @relation("senderFriend")
  receiverFriend  Friend[]         @relation("receiverFriend")
  onlineStatus    OnlineStatus     @default(offline)
  lastOnline      DateTime?
  userAnswer      UserAnswer[]
}

model Question {
  id         String       @default(cuid()) @id
  content    String
  userAnswer UserAnswer[]
  color      String
}

model UserAnswer {
  id               String   @default(cuid()) @id
  createBy         User     @relation(fields: [userId], references: [id])
  userId           String
  question         Question @relation(fields: [questionId], references: [id])
  questionId       String
  color            String
  background       File     @relation(fields: [backgroundFileId], references: [id])
  backgroundFileId String
  createAt         DateTime @default(now())
}

model SocialProvider {
  @@id([id, type])
  id          String
  type        SocialProviderType
  user        User               @relation(fields: [userId], references: [id])
  userId      String
  email       String?
  phoneNumber String?
  name        String?
  avatar      String?
  gender      Gender?
  birthday    DateTime?
}

model Friend {
  @@id([senderId, receiverId])
  sender      User      @relation("senderFriend", fields: [senderId], references: [id])
  receiver    User      @relation("receiverFriend", fields: [receiverId], references: [id])
  senderId    String
  receiverId  String
  sentAt      DateTime  @default(now())
  acceptedAt  DateTime?
  isSuperLike Boolean   @default(false)
  isBlocked   Boolean   @default(false)
}

model UserImage {
  @@id([userId, imageId])
  user    User   @relation(fields: [userId], references: [id])
  image   File   @relation(fields: [imageId], references: [id])
  userId  String
  imageId String
}

model File {
  id                String              @default(cuid()) @id
  type              FileType
  url               String
  thumbnail         String?
  userAvatar        User[]              @relation("avatar")
  userImage         UserImage[]
  messageAttachment MessageAttachment[]
  UserAnswer        UserAnswer[]
}

model Role {
  id          String   @unique @id
  name        String
  description String?
  permissions String[]
  user        User[]
}

model Message {
  id                String              @default(cuid()) @id
  message           String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  receivedAt        DateTime?
  readAt            DateTime?
  messageAttachment MessageAttachment[]
  sender            User                @relation("senderMessage", fields: [senderId], references: [id])
  receiver          User                @relation("receiverMessage", fields: [receiverId], references: [id])
  senderId          String
  receiverId        String
}

model MessageAttachment {
  @@id([messageId, fileId])
  message   Message @relation(fields: [messageId], references: [id])
  file      File    @relation(fields: [fileId], references: [id])
  messageId String
  fileId    String
}

model PostCategory {
  id    String @default(cuid()) @id
  value String
  Post  Post[]
}

model Post {
  id         Int          @default(autoincrement()) @id
  category   PostCategory @relation(fields: [categoryId], references: [id])
  categoryId String
  comment    Comment[]
  deletedAt  DateTime?
}

model Comment {
  @@unique([postId, index])
  id            String    @default(cuid()) @id
  index         Int
  parentComment Comment?  @relation("ReplyToComment", fields: [parentId], references: [id])
  reply         Comment[] @relation("ReplyToComment")
  parentId      String?
  content       String
  post          Post      @relation(fields: [postId], references: [id])
  postId        Int
  createdAt     DateTime  @default(now())
  deletedAt     DateTime?
}

model QnA {
  id       Int    @default(autoincrement()) @id
  question String
  answer   String
}

model AppConfig {
  id          String  @id
  name        String
  description String?
  data        Json
}
