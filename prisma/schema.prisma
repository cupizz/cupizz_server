// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Gender {
  male
  female
  other
}

enum FileType {
  image
  video
}

enum SocialProviderType {
  email
  facebook
  google
  instagram
}

enum OnlineStatus {
  online
  away
  offline
}

enum PrivateField {
  birthday
  introduction
  gender
  hobbies
  phoneNumber
  job
  height
}

enum MustHaveField {
  age
  height
  distance
  gender
}

model User {
  id                  String               @id @default(uuid())
  password            String?
  nickName            String
  introduction        String?
  birthday            DateTime?
  gender              Gender?
  hobbies             HobbyValue[]
  phoneNumber         String?
  job                 String?
  height              Int?
  privateFields       PrivateField[]
  minAgePrefer        Int?
  maxAgePrefer        Int?
  minHeightPrefer     Int?
  maxHeightPrefer     Int?
  genderPrefer        Gender[]
  distancePrefer      Int?
  mustHaveFields      MustHaveField[]
  allowMatching       Boolean              @default(true)
  isPrivate           Boolean              @default(false)
  showActive          Boolean              @default(true)
  avatar              File?                @relation("avatar", fields: [avatarId], references: [id])
  avatarId            String?
  role                Role                 @relation(fields: [roleId], references: [id])
  roleId              String
  userImage           UserImage[]
  senderMessage       Message[]            @relation("senderMessage")
  socialProvider      SocialProvider[]
  senderFriend        Friend[]             @relation("senderFriend")
  receiverFriend      Friend[]             @relation("receiverFriend")
  onlineStatus        OnlineStatus         @default(offline)
  lastOnline          DateTime?
  userAnswer          UserAnswer[]
  dislikedUsers       DislikedUser[]       @relation("dislikedUser")
  beDislikedByUsers   DislikedUser[]       @relation("beDislikedByUser")
  recommendableUser   RecommendableUser[]  @relation("recommendableUser")
  recommendToUser     RecommendableUser[]  @relation("recommendToUser")
  conversationMembers ConversationMember[]
  updatedAt           DateTime             @updatedAt
  createdAt           DateTime             @default(now())
  deletedAt           DateTime?
  userDeviceTokens    UserDeviceToken[]
}

model UserDeviceToken {
  token    String   @id
  user     User     @relation(fields: [userId], references: [id])
  deviceId String?
  userId   String
  expireAt DateTime
}

model Question {
  id         String       @id @default(cuid())
  content    String
  userAnswer UserAnswer[]
  color      String
}

model UserAnswer {
  id         String     @id @default(cuid())
  question   Question   @relation(fields: [questionId], references: [id])
  questionId String
  color      String
  content    String
  createBy   User       @relation(fields: [createById], references: [id])
  createById String
  createAt   DateTime   @default(now())
  userImage  UserImage?
}

model UserImage {
  user         User        @relation(fields: [userId], references: [id])
  image        File        @relation(fields: [imageId], references: [id])
  userId       String
  imageId      String
  userAnswer   UserAnswer? @relation(fields: [userAnswerId], references: [id])
  userAnswerId String?

  @@id([userId, imageId])
}

model SocialProvider {
  id          String
  type        SocialProviderType
  user        User               @relation(fields: [userId], references: [id])
  userId      String
  email       String?
  phoneNumber String?
  name        String?
  avatar      String?
  gender      Gender?
  birthday    DateTime?

  @@id([id, type])
}

model Friend {
  sender      User      @relation("senderFriend", fields: [senderId], references: [id])
  receiver    User      @relation("receiverFriend", fields: [receiverId], references: [id])
  senderId    String
  receiverId  String
  sentAt      DateTime  @default(now())
  acceptedAt  DateTime?
  isSuperLike Boolean   @default(false)

  @@id([senderId, receiverId])
}

model File {
  id                String              @id @default(cuid())
  type              FileType
  url               String
  thumbnail         String?
  userAvatar        User[]              @relation("avatar")
  userImage         UserImage[]
  messageAttachment MessageAttachment[]
  Message           Message?            @relation(fields: [messageId], references: [id])
  messageId         String?
}

model Role {
  id          String   @id
  name        String
  description String?
  permissions String[]
  user        User[]
}

model Conversation {
  id        String               @id @default(cuid())
  name      String?
  members   ConversationMember[]
  messages  Message[]
  createdAt DateTime             @default(now())
  updatedAt DateTime             @default(now()) @updatedAt
}

model ConversationMember {
  conversation       Conversation @relation(fields: [conversationId], references: [id])
  conversationId     String
  user               User         @relation(fields: [userId], references: [id])
  userId             String
  createdAt          DateTime     @default(now())
  lastReadMessage    Message?     @relation(fields: [messageId], references: [id])
  messageId          String?
  unreadMessageCount Int          @default(0)
  isAdmin            Boolean      @default(false)

  @@id([conversationId, userId])
}

model Message {
  id                      String               @id @default(cuid())
  message                 String
  attachments             File[]
  sender                  User                 @relation("senderMessage", fields: [senderId], references: [id])
  senderId                String
  conversation            Conversation         @relation(fields: [conversationId], references: [id])
  conversationId          String
  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @updatedAt
  lastReadMessageOfMember ConversationMember[]
  MessageAttachment       MessageAttachment[]
}

model MessageAttachment {
  message   Message @relation(fields: [messageId], references: [id])
  file      File    @relation(fields: [fileId], references: [id])
  messageId String
  fileId    String

  @@id([messageId, fileId])
}

model PostCategory {
  id    String @id @default(cuid())
  value String
  Post  Post[]
}

model Post {
  id         Int          @id @default(autoincrement())
  category   PostCategory @relation(fields: [categoryId], references: [id])
  categoryId String
  comment    Comment[]
  deletedAt  DateTime?
}

model Comment {
  id            String    @id @default(cuid())
  index         Int
  parentComment Comment?  @relation("ReplyToComment", fields: [parentId], references: [id])
  reply         Comment[] @relation("ReplyToComment")
  parentId      String?
  content       String
  post          Post      @relation(fields: [postId], references: [id])
  postId        Int
  createdAt     DateTime  @default(now())
  deletedAt     DateTime?

  @@unique([postId, index])
}

model QnA {
  id       Int    @id @default(autoincrement())
  question String
  answer   String
}

model AppConfig {
  id          String  @id
  name        String
  description String?
  data        Json
}

model DislikedUser {
  user           User     @relation("dislikedUser", fields: [userId], references: [id])
  dislikedUser   User     @relation("beDislikedByUser", fields: [dislikedUserId], references: [id])
  userId         String
  dislikedUserId String
  dislikedAt     DateTime @default(now())

  @@id([userId, dislikedUserId])
}

model RecommendableUser {
  sortOrder           Int
  user                User   @relation("recommendableUser", fields: [userId], references: [id])
  recommendableUser   User   @relation("recommendToUser", fields: [recommendableUserId], references: [id])
  userId              String
  recommendableUserId String

  @@id([userId, recommendableUserId])
  @@unique([userId, sortOrder])
}

model HobbyValue {
  id      String  @id @default(cuid())
  value   String
  isValid Boolean @default(true)
  user    User[]
}
